import { UserRole } from "@prisma/client";

export const PERMISSION_ACTIONS = {
  LINKS_CREATE: "LINKS_CREATE",
  LINKS_READ: "LINKS_READ",
  LINKS_UPDATE: "LINKS_UPDATE",
  LINKS_TRANSFER: "LINKS_TRANSFER",
  LINKS_DELETE: "LINKS_DELETE",

  WORKSPACES_CREATE: "WORKSPACES_CREATE",
  WORKSPACES_READ: "WORKSPACES_READ",
  WORKSPACES_UPDATE: "WORKSPACES_UPDATE",
  WORKSPACES_DELETE: "WORKSPACES_DELETE",

  DOMAINS_CREATE: "DOMAINS_CREATE",
  DOMAINS_READ: "DOMAINS_READ",
  DOMAINS_UPDATE: "DOMAINS_UPDATE",
  DOMAINS_DELETE: "DOMAINS_DELETE",

  TOKENS_CREATE: "TOKENS_CREATE",
  TOKENS_READ: "TOKENS_READ",
  TOKENS_UPDATE: "TOKENS_UPDATE",
  TOKENS_DELETE: "TOKENS_DELETE",

  TAGS_CREATE: "TAGS_CREATE",
  TAGS_READ: "TAGS_READ",
  TAGS_UPDATE: "TAGS_UPDATE",
  TAGS_DELETE: "TAGS_DELETE",

  ANALYTICS_READ: "ANALYTICS_READ",
} as const;

export type PermissionAction = keyof typeof PERMISSION_ACTIONS;

export const ROLE_PERMISSIONS = {
  [UserRole.ADMIN]: Object.values(PERMISSION_ACTIONS),
  [UserRole.MEMBER]: [
    PERMISSION_ACTIONS.LINKS_CREATE,
    PERMISSION_ACTIONS.LINKS_READ,
    PERMISSION_ACTIONS.LINKS_UPDATE,
    PERMISSION_ACTIONS.LINKS_DELETE,
    PERMISSION_ACTIONS.WORKSPACES_CREATE,
    PERMISSION_ACTIONS.WORKSPACES_READ,
    PERMISSION_ACTIONS.WORKSPACES_UPDATE,
    PERMISSION_ACTIONS.DOMAINS_CREATE,
    PERMISSION_ACTIONS.DOMAINS_READ,
    PERMISSION_ACTIONS.DOMAINS_UPDATE,
    PERMISSION_ACTIONS.TOKENS_READ,
    PERMISSION_ACTIONS.TAGS_CREATE,
    PERMISSION_ACTIONS.TAGS_READ,
    PERMISSION_ACTIONS.TAGS_UPDATE,
    PERMISSION_ACTIONS.ANALYTICS_READ,
  ],
  [UserRole.GUEST]: [
    PERMISSION_ACTIONS.LINKS_CREATE,
    PERMISSION_ACTIONS.LINKS_READ,
    PERMISSION_ACTIONS.LINKS_UPDATE,
    PERMISSION_ACTIONS.LINKS_DELETE,
    PERMISSION_ACTIONS.WORKSPACES_READ,
    PERMISSION_ACTIONS.DOMAINS_READ,
    PERMISSION_ACTIONS.TOKENS_READ,
    PERMISSION_ACTIONS.TAGS_CREATE,
    PERMISSION_ACTIONS.TAGS_READ,
    PERMISSION_ACTIONS.TAGS_UPDATE,
    PERMISSION_ACTIONS.TAGS_DELETE,
    PERMISSION_ACTIONS.ANALYTICS_READ,
  ],
};

export const getPermissionsByRole = (role?: UserRole): PermissionAction[] => {
  if (!role) return [];
  return ROLE_PERMISSIONS[role];
};

export const validateScopesForRole = (
  scopes: string[],
  role?: UserRole,
): boolean => {
  const allowedScopes = getPermissionsByRole(role);
  const invalidScopes = scopes.filter(
    (scope) => !allowedScopes.includes(scope as PermissionAction),
  );

  return !(invalidScopes.length > 0);
};
