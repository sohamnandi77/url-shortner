datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["prismaSchemaFolder", "driverAdapters", "omitApi"]
}

// Necessary for Next auth

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    invalidLoginAttempts  Int                    @default(0)
    lockedAt              DateTime?
    isTwoFactorEnabled    Boolean                @default(false)
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    defaultWorkspace      String?
    twoFactorConfirmation TwoFactorConfirmation?
    accounts              Account[]
    sessions              Session[]
    links                 Link[]
    workspaces            WorkspaceUsers[]
    restrictedToken       RestrictedToken[]
}

model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    invalidLoginAttempts     Int      @default(0)
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}
