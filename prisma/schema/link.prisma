model Link {
    id                  String    @id @default(cuid())
    domain              String // domain of the link
    keyword             String // not making it unique for now as combination of domain & keyword will be unique
    originalLink        String
    archived            Boolean   @default(false) // whether the link is archived or not
    expiredLinkByDate   DateTime? // when the link expires by Date
    expiredLinkByClicks String? // when the link expires by clicks
    expiredLink         String? // URL to redirect the user to when the link is expired
    password            String? // password to access the link
    banned              Boolean   @default(false) // whether the link is banned or not
    shouldIndex         Boolean   @default(false) // whether the link should be indexed by search engines or not
    comments            String? // comments on the link
    cloaked             Boolean   @default(false) // whether the link is cloaked or not
    iframeable          Boolean   @default(false) // whether the link is iframeable or not

    // Open Graph tags
    proxy         Boolean @default(false) // Proxy to use custom OG tags â€“ if false, will use OG tags from original link
    ogTitle       String? // OG title for the link 
    ogDescription String? // OG description for the link
    ogImage       String? // OG image for the link
    ogVideo       String? // OG video for the link

    // UTM parameters
    utmSource   String? // UTM source for the link
    utmMedium   String? // UTM medium for the link
    utmCampaign String? // UTM campaign for the link
    utmTerm     String? // UTM term for the link
    utmContent  String? // UTM content for the link

    // Custom device targeting
    iosTargeting     String? // custom link for iOS devices
    androidTargeting String? // custom link for Android devices
    geoTargeting     Json? // custom link for specific countries

    // Tags
    tags LinkTag[]

    // User Info
    user      User?    @relation(fields: [userId], references: [id]) // user who created the link
    userId    String // user who created the link
    createdAt DateTime @default(now()) // when the link was created
    updatedAt DateTime @updatedAt // when the link was updated
    createdBy String? // who created the link
    updatedBy String? // who updated the link

    // Link Analytics
    showAnalytics Boolean         @default(false)
    clicks        Int             @default(0) // number of clicks
    uniqueClicks  Int             @default(0) // number of unique clicks
    lastClicked   DateTime? // when the link was last clicked
    analytics     LinkAnalytics[]

    // Workspace Info
    workspace   Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: Cascade, onDelete: Cascade) // workspace where the link belongs to
    workspaceId String? // workspace where the link belongs to

    @@unique([domain, keyword])
    @@index(workspaceId)
    @@index(domain)
    @@index(proxy)
    @@index(password)
    @@index(archived)
    @@index(createdAt(sort: Desc))
    @@index(clicks(sort: Desc))
    @@index(lastClicked)
    @@index(userId)
}
